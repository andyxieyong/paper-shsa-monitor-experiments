#!/usr/bin/env python2.7
"""Manipulate the pickle file generated by `bag_to_itoms.py`.

__date__ = 2019-02-28
__author__ = Denise Ratasich

"""

import argparse
import pickle
import random

from model.itom import Itom, Itoms
from model.monitor import Monitor as SHSAMonitor


class FaultInjection(object):
    """Manipulates a list of itoms."""

    def __init__(self, signal, timespan, faults=[]):
        self.__signal = signal
        self.__t_from = timespan[0]
        self.__t_to = timespan[1]
        self.__faults = faults
        random.seed()

    @property
    def manipulated(self):
        return len(self.__faults) > 0

    @property
    def faults(self):
        return self.__faults

    def delay(self, itoms, dt):
        """Shifts the reception of the itoms of the given signal by dt."""
        num_changed = 0
        for n, (t, itom) in enumerate(itoms):
            if itom.name == args.signal \
               and itom.t > self.__t_from and itom.t < self.__t_to:
                t = t + dt*1e9
                itoms[n] = (t, itom)
                num_changed = num_changed + 1
        # re-sort itoms
        itoms = sorted(itoms, key=lambda msg: msg[0])
        print "[fault injection] delay {} messages by {} seconds".format(
            num_changed, dt)
        self.__faults.append((self.__t_from, self.__t_to, self.__signal,
                              "delay by {}s".format(dt)))
        return itoms

    def add_random_noise(self, itoms, maximum):
        num_changed = 0
        for n, (t, itom) in enumerate(itoms):
            if itom.name == args.signal \
               and itom.t > self.__t_from and itom.t < self.__t_to:
                noise = random.uniform(0, maximum)
                try:
                    itom.v = [x + noise for x in itom.v]
                except TypeError as e:
                    itom.v = itom.v + noise
                itoms[n] = (t, itom)
                num_changed = num_changed + 1
        print "[fault injection] add random noise to {} messages".format(
            num_changed)
        self.__faults.append((self.__t_from, self.__t_to, self.__signal,
                              "random noise [0,{}]".format(maximum)))
        return itoms

    def stuck_at(self, itoms):
        num_changed = 0
        for n, (t, itom) in enumerate(itoms):
            if itom.name == args.signal \
               and itom.t > self.__t_from and itom.t < self.__t_to:
                try:
                    itom.v = [0 for x in itom.v]
                except TypeError as e:
                    itom.v = 0
                itoms[n] = (t, itom)
                num_changed = num_changed + 1
        print "[fault injection] stuck-at 0 of {} messages".format(num_changed)
        self.__faults.append((self.__t_from, self.__t_to, self.__signal,
                              "stuck-at 0"))
        return itoms


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="""Manipulate itoms of given signal.""")
    parser.add_argument("picklefile", type=str,
                        help="""Data (pickle file) containing itoms.""")
    parser.add_argument("signal", type=str,
                        help="Signal to manipulate.")
    parser.add_argument("-t", "--timespan", metavar=("FROM", "TO"), type=float, nargs=2,
                        help="Inject fault only FROM and TO time in seconds from start.")
    parser.add_argument("-d", "--delay", type=float, default=0,
                        help="Delay itoms (reception) by DELAY seconds.")
    parser.add_argument("-n", "--noise", type=float, default=0,
                        help="Add random noise, uniformly distributed from [0,NOISE].")
    parser.add_argument("-s", "--stuck-at", action='store_true',
                        help="Stuck to a value.")
    args = parser.parse_args()

    with open(args.picklefile, 'rb') as f:
        data = pickle.load(f)

    itoms = sorted(data['itoms'], key=lambda msg: msg[0])
    start = itoms[0][0]
    fi = FaultInjection(args.signal, [t*1e9 + start for t in args.timespan],
                        faults=data['faults'])

    if args.delay > 0:
        itoms = fi.delay(itoms, args.delay)
    if args.noise > 0:
        itoms = fi.add_random_noise(itoms, args.noise)
    if args.stuck_at:
        itoms = fi.stuck_at(itoms)

    print "[fault injection] number of itoms: {}".format(len(itoms))
    data['itoms'] = itoms
    data['manipulated'] = fi.manipulated
    data['faults'] = fi.faults

    with open(args.picklefile, 'wb') as f:
        pickle.dump(data, f, protocol=-1)
